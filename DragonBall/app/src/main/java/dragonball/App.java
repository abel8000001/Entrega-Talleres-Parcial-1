/*
 * This source file was generated by the Gradle 'init' task
 */
package dragonball;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URI;
import java.net.URL;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Stack;

import javax.lang.model.util.ElementScanner14;
import javax.swing.ProgressMonitorInputStream;

import org.apache.commons.collections4.Bag;
import org.apache.commons.collections4.bag.HashBag;

import com.google.gson.Gson;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.google.j2objc.annotations.ObjectiveCName;

public class App {

    public static void main(String[] args) throws Exception {

        String apiUrl = "https://dragonball-api.com/api/characters";

        try {
            // Crear cliente HTTP
            HttpClient client = HttpClient.newHttpClient();

            // Crear solicitud HTTP
            HttpRequest request = HttpRequest.newBuilder()
                    .uri(URI.create(apiUrl))
                    .GET()
                    .header("Accept", "application/json")
                    .build();

            // Enviar solicitud y obtener respuesta
            HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());

            // Analizar la respuesta JSON
            Gson gson = new Gson();
            JsonObject jsonResponse = gson.fromJson(response.body(), JsonObject.class);

            // Extraer la lista de criptomonedas
            Personaje[] personajesAsArray = gson.fromJson(
                    jsonResponse.getAsJsonArray("items"), Personaje[].class);

            // Convertir el array a una lista
            List<Personaje> personajes = Arrays.asList(personajesAsArray);

            Queue<Personaje> personajesQueue = new LinkedList<>();
            personajes.forEach(personajesQueue::add);

            personajes.forEach(System.out::println);

            Queue<Personaje> cola1 = new LinkedList<>();
            Queue<Personaje> cola2 = new LinkedList<>();
            int mitad = personajes.size() / 2;
            int contador = 0;

            while (!personajesQueue.isEmpty()) {
                if (contador < mitad) {
                    cola1.add(personajesQueue.poll());
                } else {
                    cola2.add(personajesQueue.poll());
                }

                contador++;
            }

            System.out.println("\n-------------Enfrentamientos-------------\n");

            Personaje personaje1;
            Personaje personaje2;

            while (!cola1.isEmpty() && !cola2.isEmpty()) {
                personaje1 = cola1.poll();
                personaje2 = cola2.poll();
                System.out.println(personaje1.getNombre() + " VS. " + personaje2.getNombre());
            }

            Stack<Personaje> rastrador_poder = new Stack<>();

            for (Personaje personaje : personajes) {
                if (personaje.getKiFormateado() >= 1000000) {
                    rastrador_poder.push(personaje);
                }
            }

            System.out.println("\n----------Personajes mas poderoso----------\n");

            while (!rastrador_poder.isEmpty()) {
                personaje1 = rastrador_poder.pop();
                System.out.println("Nombre: " + personaje1.getNombre() + ", Ki: " + personaje1.getKi());
            }

            Bag<String> censo_razas = new HashBag<>();

            for (Personaje personaje : personajes) {
                censo_razas.add(personaje.getRaza());
            }

            System.out.println("\n----------Censo de razas----------\n");
            System.out.println("Cantidad de razas: " + censo_razas.uniqueSet().size());
            System.out.println(censo_razas.uniqueSet());

        } catch (Exception e) {
            System.err.println("Error al consumir la API: " + e.getMessage());
        }
    }

}

class Personaje {
    private int id;
    private String name;
    private String ki;
    private String race;

    public Personaje(int id, String name, String ki, String race) {
        this.id = id;
        this.name = name;
        this.ki = ki;
        this.race = race;
    }

    public int getKiFormateado() {
        return Integer.parseInt(ki.replace(".", ""));
    }

    public int getId() {
        return id;
    }

    public String getNombre() {
        return name;
    }

    public String getKi() {
        return ki;
    }

    public String getRaza() {
        return race;
    }

    @Override
    public String toString() {
        return "Personaje {id: " + id + ", nombre: " + name + ", ki: " + ki + ", raza: " + race + "}";
    }
}