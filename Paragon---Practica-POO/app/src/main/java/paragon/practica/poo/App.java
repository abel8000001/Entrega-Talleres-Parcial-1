/*
 * This source file was generated by the Gradle 'init' task
 */
package paragon.practica.poo;

import java.io.IOException;
import java.util.InputMismatchException;
import java.util.List;
import java.util.Scanner;

import paragon.practica.poo.database.Database;
import paragon.practica.poo.model.Habilidad;
import paragon.practica.poo.model.Item;
import paragon.practica.poo.model.Jugador;
import paragon.practica.poo.model.Personaje;
import paragon.practica.poo.model.clasespersonaje.Guerrero;
import paragon.practica.poo.model.clasespersonaje.Mago;
import paragon.practica.poo.model.clasespersonaje.Picaro;
import paragon.practica.poo.utils.Utils;

public class App {
    public static void main(String[] args) {

        Scanner scanner = new Scanner(System.in);

        try {
            Database.cargar();
            System.out.println("-----Paragón-----");

            while (true) {
                System.out.println("Selecciona una opción");
                System.out.println("1. Iniciar sesión\n2. Registrarse\n3. Salir");
                switch (scanner.nextLine()) {
                    case "1":
                        Jugador jugadorSesionActiva = login(scanner);

                        if (jugadorSesionActiva != null) {
                            menuPrincipal(jugadorSesionActiva, scanner);
                        } else {
                            System.out.println("Error al iniciar sesión. Inténtalo nuevamente");
                        }
                        break;
                    case "2":
                        registrarse(scanner);
                        break;
                    case "3":
                        return;
                    default:
                        System.out.println("Opción inválida");
                        continue;
                }
            }

        } catch (IOException e) {
            System.out.println("Error al leer el archivo: " + e);
        }
    }

    public static Jugador login(Scanner scanner) throws IOException {

        System.out.print("Usuario: ");
        String username = scanner.nextLine().trim();
        System.out.print("Contraseña: ");
        String password = scanner.nextLine().trim();

        List<Jugador> jugadores = Database.getJugadores();
        for (Jugador jugador : jugadores) {
            if (jugador.getUsername().equals(username) && jugador.getPassword().equals(password)) {
                return jugador;
            }
        }

        return null;

    }

    public static void registrarse(Scanner scanner) {
        try {
            System.out.print("Usuario: ");
            String username = scanner.nextLine().trim();
            System.out.print("Contraseña: ");
            String password = scanner.nextLine().trim();

            if (username != null && !username.isEmpty() && password != null && !password.isEmpty()) {
                Database.getJugadores().add(new Jugador(username, password));
                System.out.println("Usuario creado con exito");
                Database.guardar();
            } else {
                System.out.println("Error al crear usuario.");
            }
        } catch (IOException e) {
            System.out.println("Error al acceder al archivo: " + e);
        }

    }

    public static void menuPrincipal(Jugador jugador, Scanner scanner) {

        int seleccion;
        String nombrePersonajeNuevo;

        try {
            // Menu principal
            System.out.println("¡Bienvenido a Paragón!\n");

            while (true) {

                System.out.println("Selecciona una opción");
                System.out.println(
                        "1. Pelear\n2. Crear personaje\n3. Editar personaje\n4. Listar personajes\n5. Borrar personaje\n6. Cerrar sesión");

                seleccion = scanner.nextInt();
                scanner.nextLine();
                switch (seleccion) {
                    case 1:
                        System.out.println("\nEscoge tu personaje:");
                        System.out.println("0. Cancelar");
                        for (int i = 0; i <= jugador.getPersonajes().size() - 1; i++) {
                            System.out.println(i + 1 + ". " + jugador.getPersonajes().get(i).getNombre());
                        }

                        seleccion = scanner.nextInt();
                        scanner.nextLine();

                        if (seleccion < 0 || seleccion > jugador.getPersonajes().size()) {
                            System.out.println("Escoge una opción válida");
                            continue;
                        }

                        if (seleccion == 0) {
                            break;
                        }

                        Personaje personajePropio = jugador.getPersonajes().get(seleccion - 1);

                        System.out.println("Escoge tu usuario rival:");
                        System.out.println("0. Cancelar");
                        for (int i = 0; i <= Database.getJugadores().size() - 1; i++) {
                            System.out.println(i + 1 + ". " + Database.getJugadores().get(i).getUsername());
                        }

                        seleccion = scanner.nextInt();
                        scanner.nextLine();

                        if (seleccion < 0 || seleccion > Database.getJugadores().size()) {
                            System.out.println("Escoge una opción válida");
                            continue;
                        }

                        if (seleccion == 0) {
                            break;
                        }

                        Jugador jugadorRival = Database.getJugadores().get(seleccion - 1);

                        System.out.println("\nEscoge el personaje del rival contra el que quieres pelear:");
                        System.out.println("0. Cancelar");
                        for (int i = 0; i <= jugadorRival.getPersonajes().size() - 1; i++) {
                            System.out.println(i + 1 + ". " + jugadorRival.getPersonajes().get(i).getNombre());
                        }

                        seleccion = scanner.nextInt();
                        scanner.nextLine();

                        if (seleccion < 0 || seleccion > jugadorRival.getPersonajes().size()) {
                            System.out.println("Escoge una opción válida");
                            continue;
                        }

                        if (seleccion == 0) {
                            break;
                        }

                        Personaje personajeRival = jugadorRival.getPersonajes().get(seleccion - 1);

                        if (personajePropio == personajeRival) {
                            System.out.println("Un personaje no puede pelear contra sí mismo.");
                        } else {
                            pelear(personajePropio, personajeRival, scanner);
                        }

                        Database.guardar();
                        break;
                    case 2:
                        System.out.print("Escribe el nombre de tu nuevo personaje: ");
                        nombrePersonajeNuevo = scanner.nextLine();

                        System.out.println("Escoge la clase de tu nuevo personaje");
                        System.out.println("1. Guerrero\n2. Mago\n3. Picaro\n4. Cancelar");
                        switch (scanner.nextLine()) {
                            case "1":
                                new Guerrero(nombrePersonajeNuevo, jugador);
                                break;
                            case "2":
                                new Mago(nombrePersonajeNuevo, jugador);
                                break;
                            case "3":
                                new Picaro(nombrePersonajeNuevo, jugador);
                                break;
                            case "4":
                                break;
                            default:
                                System.out.println("Opción inválida");
                                continue;
                        }

                        System.out.println("Personaje creado con exito.");
                        System.out.println(jugador.getPersonajes().getLast().toString());
                        Database.guardar();

                        break;
                    case 3:
                        System.out.println("Escoge el personaje que quieres editar");
                        System.out.println("0. Cancelar");
                        for (int i = 0; i <= jugador.getPersonajes().size() - 1; i++) {
                            System.out.println(i + 1 + ". " + jugador.getPersonajes().get(i).getNombre());
                        }

                        seleccion = scanner.nextInt();
                        scanner.nextLine();

                        if (seleccion < 0 || seleccion > jugador.getPersonajes().size()) {
                            System.out.println("Escoge una opción válida");
                            continue;
                        }

                        if (seleccion == 0) {
                            break;
                        }

                        System.out.println("Escribe el nuevo nombre del personaje");
                        jugador.getPersonajes().get(seleccion - 1).setNombre(scanner.nextLine());

                        System.out.println("Personaje editado con exito");
                        Database.guardar();
                        break;
                    case 4:
                        for (Personaje personaje : jugador.getPersonajes()) {
                            System.out.println(personaje.toString());
                        }
                        break;
                    case 5:
                        System.out.println("Escoge el personaje que quieres borrar");
                        System.out.println("0. Cancelar");
                        for (int i = 0; i <= jugador.getPersonajes().size() - 1; i++) {
                            System.out.println(i + 1 + ". " + jugador.getPersonajes().get(i).getNombre());
                        }

                        seleccion = scanner.nextInt();
                        scanner.nextLine();

                        if (seleccion < 0 || seleccion > jugador.getPersonajes().size()) {
                            System.out.println("Escoge una opción válida");
                            continue;
                        }

                        System.out.println("Seguro que quieres borrar el personaje "
                                + jugador.getPersonajes().get(seleccion - 1).getNombre() + "?");
                        System.out.println("1. Si\n2. No");
                        switch (scanner.nextLine()) {
                            case "1":
                                jugador.removePersonaje(jugador.getPersonajes().get(seleccion - 1));
                                System.out.println("Se ha eliminado el personaje con exito");
                                Database.guardar();
                                break;
                            case "2":
                                break;
                            default:
                                System.out.println("Escoge una opción válida");
                                continue;
                        }
                        break;
                    case 6:
                        Database.guardar();
                        return;
                    default:
                        System.out.println("Escoge una opción válida");
                        break;
                }
            }
        } catch (InputMismatchException e) {
            System.out.println("Opción inválida: " + e);
        } catch (IndexOutOfBoundsException e) {
            System.out.println("Opción inválida: " + e);
        } catch (IOException e) {
            System.out.println("Error al acceder al archivo: " + e);
        }
    }

    public static void pelear(Personaje personaje1, Personaje personaje2, Scanner scanner) {

        String seleccion;
        Personaje temp;
        Personaje ganador = null;
        int saludObjetivoAntesAtaque;
        int saludObjetivoDespuesAtaque;
        boolean haySuficienteMana;
        Habilidad habilidadUsada;
        Item itemUsado;

        System.out.println(personaje1.getNombre() + " vs. " + personaje2.getNombre() + "\n¡Inicia la pelea!\n");

        // Ciclo de pelea
        while (ganador == null) {
            System.out.println("Turno de " + personaje1.getNombre() + "\n");

            System.out.println("Selecciona una opcion");
            System.out.println("1. Atacar\n2. Usar Habilidad\n3. Usar Item\n4. Rendirse\n");
            seleccion = scanner.nextLine();

            System.out.println();

            switch (seleccion) {
                case "1":
                    saludObjetivoAntesAtaque = personaje2.getPuntosSalud();
                    personaje1.atacar(personaje2);
                    saludObjetivoDespuesAtaque = personaje2.getPuntosSalud();
                    System.out.println(personaje1.getNombre() + " ha atacado!");
                    System.out.println(
                            "Daño del ataque: " + (saludObjetivoAntesAtaque - saludObjetivoDespuesAtaque) + "\n");
                    break;
                case "2":
                    saludObjetivoAntesAtaque = personaje2.getPuntosSalud();
                    habilidadUsada = seleccionarHabilidad(personaje1, scanner);
                    haySuficienteMana = personaje1.usarHabilidad(habilidadUsada, personaje2);
                    saludObjetivoDespuesAtaque = personaje2.getPuntosSalud();
                    System.out.println(personaje1.getNombre() + " ha usado " + habilidadUsada.getNombre() + "!");

                    if (!haySuficienteMana) {
                        System.out.println("No hay suficiente mana!");
                        break;
                    }

                    if (habilidadUsada.getTipo() == "Ataque") {
                        System.out.println(
                                "Daño del ataque: " + (saludObjetivoAntesAtaque - saludObjetivoDespuesAtaque) + "\n");
                    } else if (habilidadUsada.getTipo() == "Curación") {
                        System.out.println("Puntos de curación: " + (habilidadUsada.getPuntosDanio()) + "\n");
                    }
                    break;
                case "3":
                    itemUsado = seleccionarItem(personaje1, scanner);
                    personaje1.usarItem(itemUsado, personaje2);

                    System.out.println(personaje1.getNombre() + " ha usado " + itemUsado.getNombre() + "!");
                    System.out.println(itemUsado.getDescripcion());
                    break;
                case "4":
                    ganador = personaje2;
                    System.out.println(
                            personaje1.getNombre() + " se ha rendido. " + personaje2.getNombre() + " es el ganador.");
                    break;
                default:
                    System.out.println("Opción inválida. Intenta de nuevo.");
                    continue;
            }

            System.out.print(personaje1.getNombre() + " : " + personaje1.getPuntosSalud() + "/"
                    + personaje1.getSaludMaxima() + " HP, ");
            System.out.println(personaje1.getPuntosMana() + "/" + personaje1.getManaMaxima() + " MN");
            System.out.print(personaje2.getNombre() + " : " + personaje2.getPuntosSalud() + "/"
                    + personaje2.getSaludMaxima() + " HP, ");
            System.out.println(personaje2.getPuntosMana() + "/" + personaje2.getManaMaxima() + " MN\n");

            if (personaje2.getPuntosSalud() <= 0) {
                ganador = personaje1;
                System.out.println(personaje1.getNombre() + " ha ganado!");
                break;
            }

            temp = personaje1;
            personaje1 = personaje2;
            personaje2 = temp;
        }

        personaje1.regenerar();
        personaje2.regenerar();
        ganador.ganarExperiencia(Utils.randomInRange(40, 60));
    }

    public static Habilidad seleccionarHabilidad(Personaje ejecutor, Scanner scanner) {
        // Lista las habilidades disponibles
        for (int i = 0; i < ejecutor.getHabilidades().size(); i++) {
            Habilidad habilidad = ejecutor.getHabilidades().get(i);
            System.out.println((i + 1) + ". " + habilidad.getNombre());
        }

        System.out.print("Selecciona el número de la habilidad: ");
        int opcion = -1;
        while (opcion < 1 || opcion > ejecutor.getHabilidades().size()) {
            try {
                opcion = Integer.parseInt(scanner.nextLine());
                if (opcion < 1 || opcion > ejecutor.getHabilidades().size()) {
                    System.out.println("Opción inválida. Intenta de nuevo:");
                }
            } catch (NumberFormatException e) {
                System.out.println("Ingresa un número válido:");
            }
        }

        return ejecutor.getHabilidades().get(opcion - 1);
    }

    public static Item seleccionarItem(Personaje ejecutor, Scanner scanner) {
        // Lista los items disponibles
        for (int i = 0; i < ejecutor.getItems().size(); i++) {
            Item item = ejecutor.getItems().get(i);
            System.out.println((i + 1) + ". " + item.getNombre());
        }

        System.out.print("Selecciona el número del item: ");
        int opcion = -1;
        while (opcion < 1 || opcion > ejecutor.getItems().size()) {
            try {
                opcion = Integer.parseInt(scanner.nextLine());
                if (opcion < 1 || opcion > ejecutor.getItems().size()) {
                    System.out.println("Opción inválida. Intenta de nuevo:");
                }
            } catch (NumberFormatException e) {
                System.out.println("Ingresa un número válido:");
            }
        }

        return ejecutor.getItems().get(opcion - 1);
    }
}
